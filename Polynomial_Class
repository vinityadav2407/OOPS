Problem statement:->>
Implement a polynomial class, that contains following functions -

1. setCoefficient -
This function sets coefficient for a particular degree value. If term with given degree is not there in the polynomial, then corresponding term (with specified degree and value) is added. If the term is already present in the polynomial, then previous coefficient value is replaced by given coefficient value.

2. add -
Adds two polynomials and returns a new polynomial which has the result.

3. subtract -
Subtracts two polynomials and returns a new polynomial which has the result.

4. multiply -
Multiplies two polynomials and returns a new polynomial which has the result.

5. print -
Prints all the terms (only terms with non zero coefficients are to be printed) in increasing order of degree.

Print pattern for a single term : "x"

And multiple terms should be printed separated by space. For more clarity, refer sample test cases.

Note : Only keep those terms which have non - zero coefficients.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
P1 : 1x2 2x3 4x6 
P2 : 3x4 1x2
Sample Output 1 :
P1 + P2 = 2x2 2x3 3x4 4x6
Sample Input 2 :
P1 : 1x2 2x3 4x6 
P2 : 3x4 1x2
Sample Output 2 :
P1 - P2 = 2x3 -3x4 4x6
>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>>>>>>>>>
>>>>>>>>>>>
Solution:->>>>
public class Polynomial {

	/*
	 * This function sets coefficient for a particular degree value, if degree is
	 * not there in the polynomial
	 * then corresponding term with specified degree and value is added int the
	 * polynomial. If the degree
	 * is already present in the polynomial then previous coefficient is replaced by
	 * new coefficient value passed as function argument
	 */
	private int degree[];

	public Polynomial() {
		degree = new int[200];
	}

	public void setCoefficient(int degree, int coeff) {
		if (degree > (this.degree).length) {
			reconstruct();
		}
		this.degree[degree] = coeff;

	}

	// Prints all the terms(only terms with non zero coefficients are to be printed)
	// in increasing order of degree.
	private void reconstruct() {
		int temp[] = this.degree;
		this.degree = new int[(this.degree).length * 2];
		for (int i = 0; i < temp.length; i++) {
			this.degree[i] = temp[i];
		}
	}

	public void print() {
		for (int i = 0; i < (this.degree).length; i++) {
			if (!(this.degree[i] == 0)) {
				System.out.print(this.degree[i] + "x" + i + " ");
			}

		}
	}

	// Adds two polynomials and returns a new polynomial which has result
	public Polynomial add(Polynomial p) {
		for (int i = 0; i < (this.degree).length; i++) {
			this.degree[i] = this.degree[i] + p.degree[i];
		}
		return this;

	}

	// Subtracts two polynomials and returns a new polynomial which has result
	public Polynomial subtract(Polynomial p) {
		for (int i = 0; i < (this.degree).length; i++) {
			this.degree[i] = this.degree[i] - p.degree[i];
		}
		return this;
	}

	// Multiply two polynomials and returns a new polynomial which has result
	public Polynomial multiply(Polynomial p) {
		int newdegree[] = new int[(this.degree).length];
		for (int i = 0; i < (this.degree.length); i++) {
			for (int j = 0; j < (p.degree).length; j++) {
				int deg = i + j;
				if (deg < (this.degree).length) {
					newdegree[deg] = 	newdegree[deg] +degree[i] * p.degree[j];
				} 
			}
		}

		for (int i = 0; i < newdegree.length; i++) {
			this.degree[i] = newdegree[i];

		}
		return this;
	}
}
